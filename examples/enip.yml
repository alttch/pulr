# Ethernet/IP example for Allen Bradley PLCs
#
version: 2
# PLC timeout
timeout: 2
# stop if no events happened for the last 30 seconds
#event-timeout: 30
# print empty line every 2 seconds
beacon: 2
# pull data from source 5 times per second
freq: 5
# re-send all events every N seconds even if no tags modified
#resend: 10
# output as nd-json
output: ndjson
# output time, valid format values are: rfc3339, raw / timestamp
#time-format: rfc3339
# protocol
proto:
  # only ab_eip is supported at this moment
  name: enip/ab_eip
  # PLC host, port (optional)
  source: 10.10.1.75:44818
  # PLC data path
  path: "1,0"
  # PLC type, valid values are: LGX, MLGX, PLC, MLGX800
  cpu: LGX
pull:
  # pull a single tag. As usually tag structures are pulled, set-id and offset
  # are REQUIRED. Fields size and count are optional (size is set to 1 by
  # default)
  - tag: myTag1
    #size: 4
    #count: 1
    process:
      - offset: 0
        set-id: myTag1
        # valid tag types are:
        #
        # real, real32, real64, uint8, int8, sint8, byte, uint16, word, uint32,
        # dword, sint16, int16, sint32, int32, int64, sint64, uint64, qword
        type: int32
        transform:
          # divide result value by 1000
          - func: divide
            args: [ 1000 ]
          # and round to 2 digits after comma
          - func: round
            args: [ 2 ]
  # Let's pull a complicated 3-level structure MyStruct, which contains child
  # structures ChildStructA (offset=0) and ChildStructB(offset=2000)
  - tag: MyStruct
    process:
      # first child structure tags
      - offset: 0
        set-id: MyStruct.ChildStructA.TagA
        type: uint32
      - offset: 4
        set-id: MyStruct.ChildStructA.TagB
        type: real
      - offset: 8
        set-id: MyStruct.ChildStructA.TagC
        type: real
      # second child structure tags
      # to make offsets more useful, it's possible to write them as X+Y,
      # where X is the structure offset and Y is a tag offset
      - offset: 2000+0
        set-id: MyStruct.ChildStructB.TagA
        type: uint32
      - offset: 2000+4
        set-id: MyStruct.ChildStructB.TagB
        type: real
      - offset: 2000+8
        set-id: MyStruct.ChildStructB.TagC
        type: real
