# SNMP example
#
version: 2
timeout: 2
# stop if no events happened for the last 30 seconds
#event-timeout: 30
# print empty line every 2 seconds
beacon: 2
# pull data from source 2 times per second
freq: 2
# re-send all events every N seconds even if no values modified
#resend: 10
# output time, valid format values are: rfc3339, raw / timestamp
time-format: rfc3339
# protocol
proto:
  name: snmp
  # snmp host/port
  source: 10.90.34.1:161
  community: public
  # snmp version, only v2 is supported at this moment
  version: 2
# output as nd-json
output: ndjson
pull:
  - oids:
    # MIBs are not supported at this moment, OIDs should be specified in
    # a numeric format
    #
    # Types supported: Unsigned(i32), Integer(i64), OctetStrng, OID, IPAddrss,
    # Counter32, Counter64, Timeticks. Unsupported types are ignored.
    - 1.3.6.1.2.1.1.1
    - 1.3.6.1.2.1.1.3
    process:
      - oid: 1.3.6.1.2.1.1.1.0
        set-id: systemname
      - oid: 1.3.6.1.2.1.1.3.0
        # rename to uptime, optional
        set-id: uptime
        transform:
          # divide it by 100 (get seconds)
          - func: divide
            args: [ 100 ]
          # divide again, by 86400 (get days)
          - func: divide
            args: [ 86400 ]
          # round value to zero digits after comma
          - func: round
            args: [ 0 ]
  - oids: 
    # will do a single SNMPGET request if single SNMP oid specified
    # will do GETBULK request if more than one oid specified or max-repeat is set and it's > 1
    - 1.3.6.1.2.1.2.2.1.10.1
    - 1.3.6.1.2.1.2.2.1.16.1
    max-repeat: 20
    non-repeat: 0
    process:
      - oid: 1.3.6.1.2.1.2.2.1.16.13
        # rename to Pub-out
        set-id: Pub-out
        transform: &if
          # instead of value itself, measure its growing speed (here - calc
          # bandwidth)
          - func: calc_speed
          # calculate 1-second speed to avoid zero values
            args: [ 1 ]
          # multiply by 8 to get bits
          - func: multiply
            args: [ 8 ]
          # divide by 1000 to get kbits
          #- func: divide
            #args: [ 1000 ]
          # round the result to 1 digit after comma
          - func: round
            args: [ 1 ]
      - oid: 1.3.6.1.2.1.2.2.1.10.13
        set-id: Pub-in
        # use the same YAML anchor to transform the interface data
        transform: *if
